class Nodes<E> {
  data: E;
  next: Nodes<E> = null;
  constructor(data: E) {
    this.data = data;
  }
}

class Stack<E> {
  // head: Nodes<E>;
  array: E[];
  constructor() {
    // this.head = null;
    this.array = [];
  }

  public push(data: E): void {
    // const temp = this.head;
    // this.head = new Nodes<E>(data);
    // this.head.next = temp;

    this.array.push(data);
  }

  public pop(): E {
    // if (this.head === null) return null;
    // const temp = this.head;
    // this.head = this.head.next;

    // return temp.data;

    if (this.array[0] === null) return null;
    return this.array.pop();
  }

  // public peek(): E {
  //   if (this.head === null) return null;
  //   return this.head.data;
  // }
}

const input = <HTMLInputElement>document.getElementById('input');
const output = <HTMLParagraphElement>document.getElementById('output');
const getButton = <HTMLButtonElement>document.getElementById('getButton');
const backButton = <HTMLButtonElement>document.getElementById('backButton');
const stack = new Stack<string>();

getButton.addEventListener('click', () => {
  let inputText = input.value;
  stack.push(inputText);
  console.log(stack);

  output.textContent = inputText;
  input.value = '';
});

backButton.addEventListener('click', () => {
  stack.pop();

  const outputText = stack.pop();
  output.textContent = outputText;
});

// const state1 = [
//   { suit: 'H', num: 12 },
//   { suit: 'C', num: 5 },
// ];

// const state2 = [
//   { suit: 'C', num: 10 },
//   { suit: 'C', num: 5 },
// ];

// const a = [
//   { name: 'aaa', age: 12 },
//   { name: 'bbb', age: 33 },
// ];

// const b = [
//   { name: 'ccc', age: 12 },
//   { name: 'ddd', age: 33 },
// ];
// const stack = new Stack<{ suit: string; num: number }[]>();
// stack.push(a);
// stack.push(b);
// console.log(stack);

// abstract class GenericAbstractList<E> {
//   private initialList: E[];

//   constructor(arr: E[]) {
//     this.initialList = arr;
//   }

//   public getOriginalList() {
//     return this.initialList;
//   }
// }

/*  
スタックとは？
・データを一時的に蓄えておくようなデータ構造の一つです。
イメージとしては、お皿や本などを重ねていくイメージをするとわかりやすいかも。
一枚ずつ積み重ねていき、一番新しいものから取り出すと言う動きをするもの。


どのように使うのか？
・今回は、追加したデータを保存していき、前の状態に戻したい時に戻すと言うように使いました。